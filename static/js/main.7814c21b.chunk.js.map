{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","question","possibleAnswers","correctAnswer","score","sessionToken","componentDidMount","fetch","then","response","json","_this","setState","token","fetchQuestion","checkAnswer","pA","concat","result","results","shuffle","correct_answer","Object","toConsumableArray","incorrect_answers","_this2","this","react_default","a","createElement","className","class","style","display","justifyContent","dangerouslySetInnerHTML","__html","map","margin","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8MC6DzBC,oNAtDbC,MAAQ,CACNC,SAAU,GACVC,gBAAiB,GACjBC,cAAe,GACfC,MAAO,EACPC,aAAc,MAEhBC,kBAAoB,WAClBC,MAAM,qDACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACJC,EAAKC,SAAS,CACZP,aAAcK,EAAKG,UAGvBF,EAAKG,mBAEPC,YAAc,SAACC,GACTA,IAAOL,EAAKX,MAAMG,gBACpBQ,EAAKC,SAAS,CACZR,MAAOO,EAAKX,MAAMI,MAAQ,IAE5BO,EAAKG,oBAGTA,cAAgB,WACdP,MAAK,yEAAAU,OAA0EN,EAAKX,MAAMK,eACzFG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACJ,IAAMQ,EAASR,EAAKS,QAAQ,GAC5BR,EAAKC,SAAS,CACZX,SAAUiB,EAAOjB,SACjBC,gBAAiBkB,YAAO,CAAEF,EAAOG,gBAATJ,OAAAK,OAAAC,EAAA,EAAAD,CAA4BJ,EAAOM,qBAC3DrB,cAAee,EAAOG,4FAInB,IAAAI,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,WAASE,MAAM,QACbJ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIG,MAAO,CAACC,QAAS,OAAQC,eAAgB,UAAWC,wBAAyB,CAACC,OAAOV,KAAK1B,MAAMC,aAEtG0B,EAAAC,EAAAC,cAAA,UAAQG,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC9CR,KAAK1B,MAAME,gBAAgBmC,IAAI,SAAArB,GAAE,OAAIW,EAAAC,EAAAC,cAAA,UAAQG,MAAO,CAACM,OAAQ,UAAWH,wBAAyB,CAACC,OAAOpB,GAAKuB,QAAS,kBAAMd,EAAKV,YAAYC,UAGnJW,EAAAC,EAAAC,cAAA,sBAAcH,KAAK1B,MAAMI,eAjDfoC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.7814c21b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {shuffle} from \"lodash-es\";\nimport \"picnic\";\n\nclass App extends Component {\n  state = {\n    question: \"\",\n    possibleAnswers: [],\n    correctAnswer: \"\",\n    score: 0,\n    sessionToken: \"\"\n  }\n  componentDidMount = () => {\n    fetch(\"https://opentdb.com/api_token.php?command=request\")\n    .then(response => response.json())\n    .then(json => {\n      this.setState({\n        sessionToken: json.token\n      })\n    })\n    this.fetchQuestion()\n  }\n  checkAnswer = (pA) => {\n    if (pA === this.state.correctAnswer) {\n      this.setState({\n        score: this.state.score + 1\n      })\n      this.fetchQuestion()\n    }\n  }\n  fetchQuestion = () => {\n    fetch(`https://opentdb.com/api.php?amount=1&category=9&difficulty=easy&token=${this.state.sessionToken}`)\n    .then(response => response.json())\n    .then(json => {\n      const result = json.results[0]\n      this.setState({\n        question: result.question,\n        possibleAnswers: shuffle([result.correct_answer, ...result.incorrect_answers]),\n        correctAnswer: result.correct_answer\n      })\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <article class=\"card\">\n          <header>\n            <h3 style={{display: \"flex\", justifyContent: \"center\"}} dangerouslySetInnerHTML={{__html:this.state.question}}/>\n          </header>\n          <footer style={{display: \"flex\", justifyContent: \"center\"}}>\n            {this.state.possibleAnswers.map(pA => <button style={{margin: \"0 10px\"}} dangerouslySetInnerHTML={{__html:pA}} onClick={() => this.checkAnswer(pA)}/>)}\n          </footer>\n        </article>\n        <h2>Correct: {this.state.score}</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}